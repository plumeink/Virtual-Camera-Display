name: Build and Release

on:
  push:
    tags:
      - 'Ver.[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js 21
      uses: actions/setup-node@v4
      with:
        node-version: '21'

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Install dependencies
      run: npm install

    - name: Build portable version
      run: npm run dist-portable

    - name: Get version from existing tag
      id: get_version
      run: |
        # 使用PowerShell语法从您手动创建的tag中提取版本号
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/Ver.',''
        $RELEASE_TAG = $env:GITHUB_REF -replace 'refs/tags/',''
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        echo "RELEASE_TAG=$RELEASE_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Release ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/VCD-${{ env.VERSION }}-win-x64.exe
        asset_name: VCD-${{ env.VERSION }}-win-x64.exe
        asset_content_type: application/octet-stream

    - name: Cleanup Old Workflow Runs
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      shell: pwsh
      run: |
        # 使用PowerShell语法清理旧工作流运行记录
        $WORKFLOW_NAME = "${{ github.workflow }}"
        Write-Host "清理工作流名称: $WORKFLOW_NAME"
        
        # 创建数组存储所有运行记录
        $all_runs = @()
        $page = 1
        $repo = "${{ github.repository }}"
        
        # 收集所有当前工作流的运行记录
        while ($true) {
          # 获取当前页的工作流运行记录
          $uri = "https://api.github.com/repos/$repo/actions/runs?status=completed&per_page=100&page=$page&sort=created&direction=desc"
          $runs = Invoke-RestMethod -Uri $uri -Headers @{"Authorization" = "token $env:GITHUB_TOKEN"}
        
          # 如果没有更多记录，退出循环
          if (!$runs.workflow_runs -or $runs.workflow_runs.Length -eq 0) {
            break
          }
        
          # 收集当前工作流的记录ID
          $current_runs = $runs.workflow_runs | Where-Object { $_.name -eq $WORKFLOW_NAME } | Select-Object -ExpandProperty id
        
          # 如果有记录，添加到数组中
          if ($current_runs) {
            $all_runs += $current_runs
          }
        
          $page++
        }
        
        # 打印收集到的记录数
        Write-Host "收集到的工作流运行记录总数: $($all_runs.Length)"
        
        # 删除除最新5条以外的记录
        if ($all_runs.Length -gt 5) {
          # 获取要删除的记录（跳过前5个最新记录）
          $runs_to_delete = $all_runs[5..($all_runs.Length-1)]
          Write-Host "要删除的记录数: $($runs_to_delete.Length)"
        
          # 逐个删除记录，添加延迟避免API限制
          foreach ($run_id in $runs_to_delete) {
            Write-Host "删除记录ID: $run_id"
            $delete_uri = "https://api.github.com/repos/$repo/actions/runs/$run_id"
            Invoke-RestMethod -Uri $delete_uri -Headers @{"Authorization" = "token $env:GITHUB_TOKEN"} -Method Delete
            Start-Sleep -Seconds 1 # 添加1秒延迟避免触发GitHub API速率限制
          }
        } else {
          Write-Host "记录数不足5条，无需删除"
        }
          Write-Host "清理完成！"

    - name: Cleanup Old Releases
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      shell: pwsh
      run: |
        # 使用PowerShell语法清理旧Release版本
        $repo = "${{ github.repository }}"
        Write-Host "清理仓库: $repo 的旧Release版本，保留最新5个"
        
        # 获取所有Release
        $releases_uri = "https://api.github.com/repos/$repo/releases"
        $all_releases = Invoke-RestMethod -Uri $releases_uri -Headers @{"Authorization" = "token $env:GITHUB_TOKEN"}
        
        # 打印收集到的Release总数
        Write-Host "收集到的Release总数: $($all_releases.Length)"
        
        # 删除除最新5个以外的Release
        if ($all_releases.Length -gt 5) {
          # 获取要删除的Release（跳过前5个最新的）
          $releases_to_delete = $all_releases[5..($all_releases.Length-1)]
          Write-Host "要删除的Release数: $($releases_to_delete.Length)"
          
          # 逐个删除Release，添加延迟避免API限制
          foreach ($release in $releases_to_delete) {
            Write-Host "删除Release: $($release.name) (ID: $($release.id))"
            $delete_uri = "https://api.github.com/repos/$repo/releases/$($release.id)"
            Invoke-RestMethod -Uri $delete_uri -Headers @{"Authorization" = "token $env:GITHUB_TOKEN"} -Method Delete
            Start-Sleep -Seconds 1 # 添加1秒延迟避免触发GitHub API速率限制
          }
        } else {
          Write-Host "Release数不足5个，无需删除"
        }
        
        Write-Host "Release清理完成！"