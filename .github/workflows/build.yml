name: Build and Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js 21
      uses: actions/setup-node@v4
      with:
        node-version: '21'

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Install dependencies
      run: npm install

    - name: Build portable version
      run: npm run dist-portable

    - name: Generate tag
      id: generate_tag
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        tag_name: ${{ steps.generate_tag.outputs.tag }}
        release_name: Release ${{ steps.generate_tag.outputs.tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/VCD-${{ env.VERSION }}-win-x64.exe
        asset_name: VCD-${{ env.VERSION }}-win-x64.exe
        asset_content_type: application/octet-stream

    - name: Cleanup Old Workflow Runs
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      run: |
        # 获取当前工作流的名称
        WORKFLOW_NAME="${{ github.workflow }}"
        echo "清理工作流名称: $WORKFLOW_NAME"
        
        # 获取所有已完成的工作流运行，按创建时间倒序排列
        page=1
        all_runs=()
        
        # 收集所有当前工作流的运行记录
        while true; do
          # 获取当前页的工作流运行记录
          runs=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed&per_page=100&page=$page&sort=created&direction=desc")
        
          # 如果没有更多记录，退出循环
          if [ $(echo "$runs" | jq -r '.workflow_runs | length') -eq 0 ]; then
            break
          fi
        
          # 收集当前工作流的记录ID
          current_runs=$(echo "$runs" | \
            jq -r --arg name "$WORKFLOW_NAME" '.workflow_runs[] | select(.name == $name) | .id')
        
          # 如果有记录，添加到数组中
          if [ -n "$current_runs" ]; then
            all_runs+=($current_runs)
          fi
        
          page=$((page + 1))
        done
        
        # 打印收集到的记录数
        echo "收集到的工作流运行记录总数: ${#all_runs[@]}"
        
        # 删除除最新5条以外的记录
        if [ ${#all_runs[@]} -gt 5 ]; then
          # 获取要删除的记录（跳过前5个最新记录）
          runs_to_delete=${all_runs[@]:5}
          echo "要删除的记录数: ${#runs_to_delete[@]}"
        
          # 逐个删除记录，添加延迟避免API限制
          for run_id in $runs_to_delete; do
            echo "删除记录ID: $run_id"
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id"
            sleep 1 # 添加1秒延迟避免触发GitHub API速率限制
          done
        else
          echo "记录数不足5条，无需删除"
        fi
        
        echo "清理完成！"